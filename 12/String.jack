// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length, capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = Array.new(1);
            let capacity = 1;
        }else {
            let str = Array.new(maxLength);
            let capacity = maxLength;
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > (capacity - 1)) {
            do Sys.error(1);
            return 48;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > (capacity - 1)) {
            do Sys.error(1);
            return;
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = capacity) {
            do Sys.error(1);
            return this;
        } 
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let str[length - 1] = 0;
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int cur;
        var int total;
        var int i;
        var boolean neg;

        if (str[0] = 45) { // "-"
            let neg = true;
            let i = 1;
        }else {
            let i = 0;
        }
        let total = 0;
        while ((str[i] > 47) & (str[i] < 58) & (i < length())){
            let cur = str[i] - 48;
            let total = (total * 10) + cur;
            let i = i + 1;
        }
        if (neg) {
            return -total;
        }else {
            return total;
        }    
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

        // clean the string and set sign
        do Memory.deAlloc(str);
        let str = Array.new(capacity);
        let length = 0;
        if (val < 0) { // in case it's a negative number
            let str[0] = 45; // "-" 
            let length = length + 1;
            let val = -val;
        }

        // call helper to create string
        do setIntHelper(val);
        return;
    }
    

    /** This helper medhod is called by setInt to run the recursive process */
    method void setIntHelper(int val) {
        var int lastDigit;

        if (val < 10) {
            do appendChar(val + 48);
            return;
        }else {
            let lastDigit = (val - ((val / 10) * 10)) + 48;
            do setIntHelper(val / 10);
            do appendChar(lastDigit);
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
