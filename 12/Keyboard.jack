// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static int BUFFER_MAX_LENGTH; // Maximum length of a read line string
    /** Initializes the keyboard. */
    function void init() {
        let BUFFER_MAX_LENGTH = 64;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key;
        let key = 0;
        do Output.displayCursor(true);
        while (key = 0){
            let key = Keyboard.keyPressed();
        }
        while (~(Keyboard.keyPressed() = 0)) {
            let key = key; // so he has at least something to do.
        }
        do Output.displayCursor(false);
        if ((key > 31) & (key < 127)) {
            do Output.printChar(key);
        }    
        return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var char c;
        var String buffer, temp; // string, and temporary string to not limit input
        var int BUFFER_LENGTH, i;
        var boolean input;
        let BUFFER_LENGTH = 8; 
        let buffer = String.new(BUFFER_LENGTH);
        let input = true;

        do Output.printString(message);
        while (input) {
            let c = Keyboard.readChar();
            if (c = 128) { // enter
                do Output.println();
                let input = false;
            }else {
                if (c = 129) { // backspace
                    if (buffer.length() > 0) {
                        do buffer.eraseLastChar();
                        do Output.backSpace();
                    }                    
                }else {
                    if ((c > 31) & (c < 127)) { 
                        if (buffer.length() < BUFFER_LENGTH){ // make sure there's enough space in the string
                            do buffer.appendChar(c);
                        }else {
                            if (~((BUFFER_LENGTH + BUFFER_LENGTH) > BUFFER_MAX_LENGTH)){ // a user input cannot be more than 64 chars
                                let i = 0;
                                let temp = String.new(BUFFER_LENGTH + BUFFER_LENGTH);    
                                while (i < BUFFER_LENGTH) { // copying the string
                                    do temp.appendChar(buffer.charAt(i));
                                    let i = i + 1;
                                }
                                do buffer.dispose(); // get rid of the old buffer
                                let buffer = temp; // setting buffer to point to same adress as temp.
                                let BUFFER_LENGTH = BUFFER_LENGTH + BUFFER_LENGTH;
                                do buffer.appendChar(c);
                            }else {
                                do Output.backSpace();
                            }
                            
                        }
                    }
                }
            }
        }
        return buffer;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;
        let s = Keyboard.readLine(message);
        return s.intValue();
    }
}
